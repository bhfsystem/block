#!/usr/bin/env python

import json
import re
import subprocess
import os

def find_block(name):
    if os.path.exists("%s/work/%s" % (os.environ['PWD'],os.path.basename(name))):
        return "%s/work/%s" % (os.environ['PWD'], os.path.basename(name))
    elif os.environ.get('BLOCK_META',False) or os.path.exists(".git") or os.path.exists("%s/%s" % (os.environ['BLOCK_PATH'],os.path.basename(name))):
        return "%s/%s" % (os.environ['BLOCK_PATH'], os.path.basename(name))
    else:
        return "%s/work/%s" % (os.environ['PWD'], os.path.basename(name))

def git_defaults(ele):
    m = re.search('^(\w+)/', ele)
    if m:
        return "git@github.com:%s" % (ele)
    else:
        return "git@github.com:imma/%s" % (ele)

def flattern(A):
    for i in A:
        if isinstance(i,list): 
            for ii in flattern(i):
                yield ii
        else:
            yield i

def list_block(block = None, seen = { }):
    if not block:
        if os.path.exists(".git"):
            version = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).decode('ascii', 'ignore').strip()
            if version == "HEAD":
                version = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii', 'ignore').strip()

            block = {
                'name': os.path.basename(os.environ['PWD']),
                'path': os.environ['PWD'],
                'git': subprocess.check_output([ 'git', 'config', '--local', 'remote.origin.url' ]).decode('ascii', 'ignore').strip(),
                'version': version,
                'end': '.'
            }
        else:
            version = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).decode('ascii', 'ignore').strip()
            if version == "HEAD":
                version = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii', 'ignore').strip()
            block = {
                'name': os.path.basename(os.environ['PWD']),
                'path': os.environ['PWD'],
                'git': ".",
                'version': version,
                'end': '.',
                'body': { "require": [] }
            }
    try:
        if block:
            os.chdir(block['path'])
    except OSError:
        seen[block['name']] = True
        yield block
        return

    if os.path.isfile('.block-name') and os.path.exists(".git"):
        with open('.block-name') as f:
            block['name'] = f.read().strip()

    if block['name'] in seen:
        return

    try:
        with open('Blockfile.json') as f:
            block['body'] = json.load(f)
            block['body']['require'] = flattern(block['body'].get('require', []))
    except IOError:
        block['body'] = { "require": [] }

    try:
        if not os.path.exists(".git"):
            with open("%s/Blockfile.json" % subprocess.check_output(['git', 'rev-parse', '--show-cdup']).decode('ascii', 'ignore').strip()) as f:
                site_block = json.load(f)
                block['body']['require'] = list(flattern(site_block.get('require', []))) + list(block['body']['require'])
    except IOError:
        True

    if not os.environ.get("BLOCK_NO_SITE"):
        try:
            with open('Blockfile.json.site') as f:
                site_block = json.load(f)
                block['body']['require'] = list(block['body']['require']) + list(flattern(site_block.get('require', [])))
        except IOError:
            True

    seen[block['name']] = True

    for b in block['body']['require']:
        name = b.split("@")[0] 
        if "@" in b:
            version = b.split("@")[1]
        else:
            version = ""

        for dep in list_block({ 
            'name': name,
            'path': find_block(name),
            'git': git_defaults(name),
            'version': version }):
            yield dep

    yield block

def main():
    if not os.path.exists(".git"):
        if os.path.exists("Blockfile.json"):
            True
        else:
            os.chdir(subprocess.check_output(['git', 'rev-parse', '--show-cdup']).decode('ascii', 'ignore').strip())

    for b in list_block():
        print("%s %s %s %s %s" % (b['name'], b['path'], b['git'], b['version'], b.get('end','')))

main()
